---
export const prerender = true

import { getCollection } from "astro:content";
import Layout from "../../layouts/BlogsSingleLayout.astro";
import ShareButtons from "../../components/Buttons/ShareButtons.astro";

// Fetch blog collection and generate static paths
export async function getStaticPaths() {
  const blogs = await getCollection("blogs");
  return blogs.map((blog) => ({
    params: { slug: blog.slug },
    props: blog, // Pass the blog data as props
  }));
}

// Get the current blog post from Astro.props
const post = Astro.props;
const { Content } = await post.render(); // Astro will use `render()` to extract Content
---

<!-- Pass frontmatter to the layout component -->
<Layout {...post.data}>
  <article class="prose lg:prose-xl dark:prose-dark">
    <!-- Render the markdown content using the Content component -->
    <Content />
    <div class="mx-auto">
    <ShareButtons  />
    </div>
  </article>
  
  
</Layout>
<!-- 
---
// Ensure the prerender is set for static HTML generation
export const prerender = true;

import { getCollection } from "astro:content";
import Layout from "../../layouts/BlogsSingleLayout.astro";
import ShareButtons from "../../components/Buttons/ShareButtons.astro";
import Gallery from "../../components/Gallery/Gallery.astro";

// Fetch blog collection and generate static paths
export async function getStaticPaths() {
  const blogs = await getCollection("blogs");
  return blogs.map((blog) => ({
    params: { slug: blog.slug },
    props: blog, // Pass the blog data as props
  }));
}

// Get the current blog post from Astro.props
const post = Astro.props ?? {};
const { Content, body } = await post.render(); // Ensure Content is available
// Extract gallery images from blog content
const galleryImages = [];
const imageRegex = /!\[.*?\]\((.*?)\)/g;
let match;
let i = 1;
while ((match = imageRegex.exec(body)) !== null) {
  galleryImages.push({ src: match[1], alt: `Gallery Image - ${i}` });
  i++;
}
--- -->

<!-- Pass frontmatter to the layout component -->
<!-- <Layout {...post.data}>
  <article class="prose lg:prose-xl dark:prose-dark">
    Render the markdown content using the Content component
    <Content />
    <div class="mx-auto">
      <ShareButtons />
      <Gallery galleryImages={galleryImages} />
    </div>
  </article>
</Layout>
 -->


<!-- ---
import MainLayout from "../../layouts/MainLayout.astro";
import Tags from "../../components/Tags.astro";
import { getEntry } from 'astro:content';
import { formatDate } from "../../utils";

const { slug } = Astro.params;

if(slug === undefined) {
  throw new Error('Slug is required');
}

const entry = await getEntry('blog', slug);

if(entry === undefined) {
  return Astro.redirect('/404');
}

const { Content } = await entry .render();
---

<MainLayout>
  <a href="/articles" class="inline-block bg-gray-100 p-2 mb-6 hover:bg-indigo-500 hover:text-white">Back To Articles</a>
  <article>
    <h1 class="text-4xl font-bold mb-2"> {entry.data.title}</h1>
    <h3 class="text-lg mb-2">Written by {entry.data.author} on {formatDate(entry.data.pubDate)}</h3>
    <Tags tags={entry.data.tags} />
    <img src={'/images/' + entry.data.image} alt="Article Image" class="w-full h-auto rounded-xl my-6" />
    <Content />
  </article>
</MainLayout>
-->

<style is:global>
  p {
    margin: 20px 0;
  }

  h2 {
    margin: 20px 0;
    font-size: 1.8rem;
  }
</style>
